<div class="conferences">
  {% assign conferences_data = site.data.confs %}
  {% if conferences_data != blank %}
    {% assign conferences_size = conferences_data | size %}
    
    <!-- Filter controls -->
    <div class="filter-controls mb-3">
      <div class="mb-2">
        <strong>Filter by topics:</strong>
        <button class="btn btn-sm btn-outline-secondary ms-2" onclick="clearFilters()" id="clear-filters">Show All</button>
      </div>
      <div id="tag-filters" class="mb-3">
        <!-- Tags will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- Enhanced sort controls -->
    <div class="sort-controls mb-3">
      <div class="btn-group" role="group">
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('title', 'asc')" data-sort="title-asc">Name ‚Üë</button>
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('title', 'desc')" data-sort="title-desc">Name ‚Üì</button>
      </div>
      <div class="btn-group ms-2" role="group">
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('abstract_deadline', 'asc')" data-sort="abstract_deadline-asc">Abstract ‚Üë</button>
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('abstract_deadline', 'desc')" data-sort="abstract_deadline-desc">Abstract ‚Üì</button>
      </div>
      <div class="btn-group ms-2" role="group">
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('deadline', 'asc')" data-sort="deadline-asc">Paper ‚Üë</button>
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('deadline', 'desc')" data-sort="deadline-desc">Paper ‚Üì</button>
      </div>
      <div class="btn-group ms-2" role="group">
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('conference_date', 'asc')" data-sort="conference_date-asc">Conference ‚Üë</button>
        <button class="btn btn-sm btn-outline-primary" onclick="sortConferences('conference_date', 'desc')" data-sort="conference_date-desc">Conference ‚Üì</button>
      </div>
    </div>
    
    <div
      class="table-responsive"
      {% if include.limit and page.conferences.scrollable and conferences_size > 5 %}
        style="max-height: 70vh"
      {% endif %}
    >
      <table class="table table-sm table-borderless" id="conferences-table">
        <thead>
          <tr>
            <th scope="col" style="width: 15%">Conference</th>
            <th scope="col" style="width: 15%">Abstract Deadline</th>
            <th scope="col" style="width: 15%">Submission Deadline</th>
            <th scope="col" style="width: 15%">Date & Location</th>
            <th scope="col" style="width: 40%">Details</th>
          </tr>
        </thead>
        <tbody>
          {% assign conferences = conferences_data %}
          {% if include.sort_by == 'deadline' %}
            {% assign conferences = conferences_data | sort: 'deadline' %}
          {% elsif include.sort_by == 'title' %}
            {% assign conferences = conferences_data | sort: 'title' %}
          {% endif %}
          
          {% if include.limit and page.conferences.limit %}
            {% assign conferences_limit = page.conferences.limit %}
          {% else %}
            {% assign conferences_limit = conferences_size %}
          {% endif %}
          
          {% for conf in conferences limit: conferences_limit %}
            <tr data-deadline="{{ conf.deadline }}" 
                data-abstract-deadline="{{ conf.abstract_deadline }}" 
                data-title="{{ conf.title }}"
                data-conference-date="{{ conf.date_iso | default: conf.date }}"
                data-tags="{% if conf.sub %}{{ conf.sub | join: ',' }}{% endif %}"
                class="conference-row">
              <td>
                <strong>
                  {% if conf.link %}
                    <a href="{{ conf.link }}" target="_blank">{{ conf.title }} {{ conf.year }}</a>
                  {% else %}
                    {{ conf.title }} {{ conf.year }}
                  {% endif %}
                </strong>
                <br>
                <small class="text-muted">{{ conf.full_name }}</small>
              </td>
              <td>
                {% if conf.abstract_deadline %}
                  <span class="deadline-date" data-deadline="{{ conf.abstract_deadline }}">
                    {{ conf.abstract_deadline | date: '%b %d, %Y' }}
                  </span>
                  <br>
                  <small class="text-muted">{{ conf.abstract_deadline | date: '%H:%M' }} {{ conf.timezone }}</small>
                  <br>
                  <small class="countdown-text" data-deadline="{{ conf.abstract_deadline }}"></small>
                {% else %}
                  <span class="text-muted">N/A</span>
                {% endif %}
              </td>
              <td>
                {% if conf.deadline %}
                  <span class="deadline-date" data-deadline="{{ conf.deadline }}">
                    {{ conf.deadline | date: '%b %d, %Y' }}
                  </span>
                  <br>
                  <small class="text-muted">{{ conf.deadline | date: '%H:%M' }} {{ conf.timezone }}</small>
                  <br>
                  <small class="countdown-text" data-deadline="{{ conf.deadline }}"></small>
                {% else %}
                  <span class="text-muted">N/A</span>
                {% endif %}
              </td>
              <td>
                {% if conf.date %}
                  <span class="conference-date" data-conference-date="{{ conf.date_iso | default: conf.date }}">
                    <strong>{{ conf.date }}</strong>
                  </span>
                {% endif %}
                {% if conf.place %}
                  <br><small class="text-muted">üìç {{ conf.place }}</small>
                {% endif %}
              </td>
              <td>
                {% if conf.sub and conf.sub.size > 0 %}
                  <div class="mb-2">
                    {% for subject in conf.sub %}
                      <span class="badge badge-secondary badge-sm clickable-tag" onclick="filterByTag('{{ subject }}')">{{ subject }}</span>
                    {% endfor %}
                  </div>
                {% endif %}
                {% if conf.note %}
                  <div class="conference-note">
                    {{ conf.note }}
                  </div>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  {% else %}
    <p>No conferences found...</p>
  {% endif %}
</div>

<script>
let activeFilters = new Set();
let countdownInterval;

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
  generateTagFilters();
  highlightPastDates();
  startCountdownUpdates();
});

function generateTagFilters() {
  const allTags = new Set();
  const rows = document.querySelectorAll('.conference-row');
  
  rows.forEach(row => {
    const tags = row.dataset.tags;
    if (tags) {
      tags.split(',').forEach(tag => {
        if (tag.trim()) {
          allTags.add(tag.trim());
        }
      });
    }
  });
  
  const tagFiltersContainer = document.getElementById('tag-filters');
  const sortedTags = Array.from(allTags).sort();
  
  sortedTags.forEach(tag => {
    const button = document.createElement('button');
    button.className = 'btn btn-sm btn-outline-info me-1 mb-1 tag-filter';
    button.textContent = tag;
    button.onclick = () => toggleFilter(tag);
    button.dataset.tag = tag;
    tagFiltersContainer.appendChild(button);
  });
}

function toggleFilter(tag) {
  const button = document.querySelector(`[data-tag="${tag}"]`);
  
  if (activeFilters.has(tag)) {
    activeFilters.delete(tag);
    button.classList.remove('btn-info');
    button.classList.add('btn-outline-info');
  } else {
    activeFilters.add(tag);
    button.classList.remove('btn-outline-info');
    button.classList.add('btn-info');
  }
  
  applyFilters();
  updateClearButton();
}

function filterByTag(tag) {
  // This is called when clicking on badges in the table
  if (!activeFilters.has(tag)) {
    toggleFilter(tag);
  }
}

function clearFilters() {
  activeFilters.clear();
  
  // Reset all filter buttons
  document.querySelectorAll('.tag-filter').forEach(button => {
    button.classList.remove('btn-info');
    button.classList.add('btn-outline-info');
  });
  
  // Show all rows
  document.querySelectorAll('.conference-row').forEach(row => {
    row.style.display = '';
  });
  
  updateClearButton();
}

function applyFilters() {
  const rows = document.querySelectorAll('.conference-row');
  
  if (activeFilters.size === 0) {
    // Show all rows if no filters
    rows.forEach(row => row.style.display = '');
    return;
  }
  
  rows.forEach(row => {
    const rowTags = row.dataset.tags ? row.dataset.tags.split(',').map(t => t.trim()) : [];
    const hasMatchingTag = Array.from(activeFilters).some(filter => rowTags.includes(filter));
    
    row.style.display = hasMatchingTag ? '' : 'none';
  });
}

function updateClearButton() {
  const clearButton = document.getElementById('clear-filters');
  if (activeFilters.size > 0) {
    clearButton.classList.remove('btn-outline-secondary');
    clearButton.classList.add('btn-secondary');
    clearButton.textContent = `Clear Filters (${activeFilters.size})`;
  } else {
    clearButton.classList.remove('btn-secondary');
    clearButton.classList.add('btn-outline-secondary');
    clearButton.textContent = 'Show All';
  }
}

function sortConferences(sortBy, order) {
  const table = document.getElementById('conferences-table');
  const tbody = table.getElementsByTagName('tbody')[0];
  const rows = Array.from(tbody.getElementsByTagName('tr'));
  
  rows.sort((a, b) => {
    let aValue, bValue;
    
    if (sortBy === 'deadline') {
      aValue = new Date(a.dataset.deadline || '9999-12-31');
      bValue = new Date(b.dataset.deadline || '9999-12-31');
    } else if (sortBy === 'abstract_deadline') {
      aValue = new Date(a.dataset.abstractDeadline || '9999-12-31');
      bValue = new Date(b.dataset.abstractDeadline || '9999-12-31');
    } else if (sortBy === 'conference_date') {
      aValue = new Date(a.dataset.conferenceDate || '9999-12-31');
      bValue = new Date(b.dataset.conferenceDate || '9999-12-31');
    } else if (sortBy === 'title') {
      aValue = a.dataset.title.toLowerCase();
      bValue = b.dataset.title.toLowerCase();
      const comparison = aValue.localeCompare(bValue);
      return order === 'desc' ? -comparison : comparison;
    }
    
    // For date sorting
    if (sortBy !== 'title') {
      const comparison = aValue - bValue;
      return order === 'desc' ? -comparison : comparison;
    }
  });
  
  // Clear tbody and re-append sorted rows
  tbody.innerHTML = '';
  rows.forEach(row => tbody.appendChild(row));
  
  // Update button states
  document.querySelectorAll('.sort-controls button').forEach(btn => {
    btn.classList.remove('btn-primary');
    btn.classList.add('btn-outline-primary');
  });
  
  // Highlight the active sort button
  const activeButton = document.querySelector(`[data-sort="${sortBy}-${order}"]`);
  if (activeButton) {
    activeButton.classList.remove('btn-outline-primary');
    activeButton.classList.add('btn-primary');
  }
  
  // Re-apply filters and highlighting after sorting
  applyFilters();
  highlightPastDates();
}

function startCountdownUpdates() {
  updateCountdowns();
  // Update countdowns every minute
  countdownInterval = setInterval(updateCountdowns, 60000);
}

function updateCountdowns() {
  const now = new Date();
  const countdownElements = document.querySelectorAll('.countdown-text');
  
  countdownElements.forEach(element => {
    const deadline = new Date(element.dataset.deadline);
    const timeDiff = deadline - now;
    
    if (timeDiff > 0) {
      const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
      const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
      
      let countdownText = '';
      if (days > 0) {
        countdownText = `${days}d ${hours}h ${minutes}m`;
      } else if (hours > 0) {
        countdownText = `${hours}h ${minutes}m`;
      } else {
        countdownText = `${minutes}m`;
      }
      
      element.textContent = `‚è±Ô∏è ${countdownText}`;
      element.className = 'countdown-text text-info';
    } else {
      element.textContent = '‚è∞ Deadline passed';
      element.className = 'countdown-text text-muted';
    }
  });
}

// Enhanced function to highlight past dates
function highlightPastDates() {
  const now = new Date();
  
  // Handle deadline dates (abstract and submission)
  const deadlineDates = document.querySelectorAll('.deadline-date');
  deadlineDates.forEach(element => {
    const deadlineDate = new Date(element.dataset.deadline);
    const daysUntilDeadline = Math.ceil((deadlineDate - now) / (1000 * 60 * 60 * 24));
    
    // Reset classes
    element.classList.remove('text-muted', 'text-danger', 'text-warning');
    element.style.textDecoration = '';
    element.style.fontWeight = '';
    
    if (daysUntilDeadline < 0) {
      element.classList.add('text-muted');
      element.style.textDecoration = 'line-through';
    } else if (daysUntilDeadline <= 7) {
      element.classList.add('text-danger');
      element.style.fontWeight = 'bold';
    } else if (daysUntilDeadline <= 30) {
      element.classList.add('text-warning');
      element.style.fontWeight = 'bold';
    }
  });
  
  // Handle conference dates
  const conferenceDates = document.querySelectorAll('.conference-date');
  conferenceDates.forEach(element => {
    const conferenceDateStr = element.dataset.conferenceDate;
    if (conferenceDateStr && conferenceDateStr !== 'N/A') {
      // Try to parse the conference date
      let conferenceDate;
      try {
        // Handle various date formats
        if (conferenceDateStr.includes('T')) {
          // ISO format
          conferenceDate = new Date(conferenceDateStr);
        } else {
          // Try to parse text dates like "July 12-18, 2025"
          const dateMatch = conferenceDateStr.match(/(\w+)\s+(\d+)(?:-\d+)?,?\s+(\d{4})/);
          if (dateMatch) {
            const [, month, day, year] = dateMatch;
            conferenceDate = new Date(`${month} ${day}, ${year}`);
          }
        }
        
        if (conferenceDate && !isNaN(conferenceDate) && conferenceDate < now) {
          element.style.textDecoration = 'line-through';
          element.classList.add('text-muted');
        }
      } catch (e) {
        // If date parsing fails, just ignore
        console.log('Could not parse conference date:', conferenceDateStr);
      }
    }
  });
}

// Cleanup interval when page unloads
window.addEventListener('beforeunload', function() {
  if (countdownInterval) {
    clearInterval(countdownInterval);
  }
});
</script>

<style>
.conferences .badge {
  margin-right: 0.25rem;
  margin-bottom: 0.25rem;
}

.conferences .conference-note {
  font-size: 0.9em;
}

.conferences .sort-controls {
  text-align: right;
}

.conferences .deadline-date,
.conferences .conference-date {
  display: inline-block;
}

.conferences td {
  vertical-align: top;
  padding: 0.75rem 0.5rem;
}

.conferences th {
  background-color: var(--bs-light, #f8f9fa);
  font-weight: 600;
}

/* Clickable tags styling */
.conferences .clickable-tag {
  cursor: pointer;
  transition: all 0.2s ease;
}

.conferences .clickable-tag:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Filter controls styling */
.conferences .filter-controls {
  background-color: var(--bs-light, #f8f9fa);
  padding: 1rem;
  border-radius: 0.375rem;
  border: 1px solid var(--bs-border-color, #dee2e6);
}

.conferences .tag-filter {
  transition: all 0.2s ease;
}

.conferences .tag-filter:hover {
  transform: translateY(-1px);
}

/* Countdown styling */
.conferences .countdown-text {
  font-size: 0.8em;
  font-weight: 500;
  display: block;
  margin-top: 0.25rem;
}

/* Dark mode support for table headers and filters */
@media (prefers-color-scheme: dark) {
  .conferences th {
    background-color: var(--bs-dark, #343a40);
    color: var(--bs-light, #f8f9fa);
  }
  
  .conferences .filter-controls {
    background-color: var(--bs-dark, #343a40);
    border-color: var(--bs-secondary, #6c757d);
  }
}

/* Support for explicit dark mode classes (common in Jekyll themes) */
.dark .conferences th,
[data-theme="dark"] .conferences th,
.theme-dark .conferences th {
  background-color: var(--bs-dark, #343a40);
  color: var(--bs-light, #f8f9fa);
}

.dark .conferences .filter-controls,
[data-theme="dark"] .conferences .filter-controls,
.theme-dark .conferences .filter-controls {
  background-color: var(--bs-dark, #343a40);
  border-color: var(--bs-secondary, #6c757d);
}

/* Button group spacing for better mobile experience */
.conferences .btn-group {
  margin-bottom: 0.5rem;
}

@media (max-width: 768px) {
  .conferences .sort-controls {
    text-align: left;
  }
  
  .conferences .btn-group {
    display: block;
    width: 100%;
    margin-bottom: 0.5rem;
  }
  
  .conferences .btn-group .btn {
    width: 50%;
  }
  
  .conferences .filter-controls {
    padding: 0.75rem;
  }
}
</style>